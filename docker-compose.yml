services:
  postgres:
    image: postgres:15
    container_name: ats_postgres
    environment:
      POSTGRES_DB: ats_db
      POSTGRES_USER: ats_user
      POSTGRES_PASSWORD: ats_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ats_user -d ats_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: ats_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: ats_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth_service:
    build:
      context: ./auth_service
      dockerfile: Dockerfile
    container_name: auth_service
    ports:
      - "8000:8000"
    volumes:
      - ./auth_service:/app
    env_file:
      - .env
    environment:
      - DATABASE_HOST=postgres
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"

  application_service:
    build:
      context: ./application_service
      dockerfile: Dockerfile
    container_name: application_service
    ports:
      - "8001:8000"
    volumes:
      - ./application_service:/app
    env_file:
      - .env
    environment:
      - DATABASE_HOST=postgres
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"

  email_service:
    build:
      context: ./email_service
      dockerfile: Dockerfile
    container_name: email_service
    ports:
      - "8002:8002"
    volumes:
      - ./email_service:/app
    env_file:
      - .env
    environment:
      - DATABASE_HOST=postgres
      - RABBITMQ_HOST=rabbitmq
      - REDIS_HOST=redis
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate &&
             python manage.py load_email_templates &&
             python manage.py runserver 0.0.0.0:8002"

  email_worker:
    build:
      context: ./email_service
      dockerfile: Dockerfile
    container_name: email_worker
    volumes:
      - ./email_service:/app
    env_file:
      - .env
    environment:
      - DATABASE_HOST=postgres
      - RABBITMQ_HOST=rabbitmq
      - REDIS_HOST=redis
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      email_service:
        condition: service_started
    command: celery -A config worker --loglevel=info --concurrency=4

  email_beat:
    build:
      context: ./email_service
      dockerfile: Dockerfile
    container_name: email_beat
    volumes:
      - ./email_service:/app
    env_file:
      - .env
    environment:
      - DATABASE_HOST=postgres
      - RABBITMQ_HOST=rabbitmq
      - REDIS_HOST=redis
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      email_service:
        condition: service_started
    command: celery -A config beat --loglevel=info

  email_queue_consumer:
    build:
      context: ./email_service
      dockerfile: Dockerfile
    container_name: email_queue_consumer
    volumes:
      - ./email_service:/app
    env_file:
      - .env
    environment:
      - DATABASE_HOST=postgres
      - RABBITMQ_HOST=rabbitmq
      - REDIS_HOST=redis
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      email_service:
        condition: service_started
    command: python manage.py consume_email_queue --queue=email_queue

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
